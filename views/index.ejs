<!DOCTYPE html>
<html>
<head>
	<meta charset=utf-8 />
	<title>JGIS [Version Beta]</title>
	<meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
	<script src='https://api.mapbox.com/mapbox.js/v3.1.1/mapbox.js'></script>
	<link href='https://api.mapbox.com/mapbox.js/v3.1.1/mapbox.css' rel='stylesheet' />

	<script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-locatecontrol/v0.43.0/L.Control.Locate.min.js'></script>
	<link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-locatecontrol/v0.43.0/L.Control.Locate.mapbox.css' rel='stylesheet' />
<!--[if lt IE 9]>
  <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-locatecontrol/v0.43.0/L.Control.Locate.ie.css' rel='stylesheet' />
  <![endif]-->
  <!--<link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-locatecontrol/v0.43.0/css/font-awesome.min.css' rel='stylesheet' />-->

  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

  <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-draw/v0.4.10/leaflet.draw.css' rel='stylesheet' />
  <script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-draw/v0.4.10/leaflet.draw.js'></script>



  <style>
  	.title{
  		font-size: 1.5em;
  		position: absolute;
  		top:0;
  		left: 0;
  		right: 0;
  		height: 35px;

  		background-color: rgba(48, 72, 166, 1);
  		color: white;  
  		text-align: center;
  	}
  	#map {  
  		position: absolute;
  		top:0;
  		left: 0;
  		right: 0;
  		bottom:0;
  		margin-top: 35px;
  	}
  	.leaflet-control-draw-measure {
  		background-image: url('/images/measure-control.png');
  		#background-size:     cover;                     
  		background-repeat:   no-repeat;
  		background-position: center center;
  	}

  	.point-label {  white-space: nowrap;background:null;}

  </style>
</head>
<body>
	<script src="./javascripts/jquery-3.2.1.min.js"></script>
	<script src="./javascripts/Leaflet.Control.Custom.js"></script>
	<script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/leaflet.markercluster.js'></script>
	<link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/MarkerCluster.css' rel='stylesheet' />
	<link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/MarkerCluster.Default.css' rel='stylesheet' />


	<script src='https://npmcdn.com/@turf/turf/turf.min.js'></script>   
	<script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-hash/v0.2.1/leaflet-hash.js'></script>

	<script src="https://unpkg.com/leaflet.measurecontrol@1.0.0"></script>

	<!-- BOOTSTRAP Latest compiled and minified CSS -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"/>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js""></script>

	<!-- search-->
	<link rel="stylesheet" type="text/css" href="leaflet-search/dist/leaflet-search.min.css"/>
	<script src="leaflet-search/dist/leaflet-search.min.js"></script>

	<script src="./javascripts/alertify.js"></script>

	<div class="title">JGIS</div>
	<div id='map'></div>

	<script>
		$(function(){

			L.mapbox.accessToken = 'pk.eyJ1IjoidGVobm5uIiwiYSI6ImNpZzF4bHV4NDE0dTZ1M200YWxweHR0ZzcifQ.lpRRelYpT0ucv1NN08KUWQ';
			var map = L.mapbox.map('map');

			var googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
				maxZoom: 20,
				subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
			});
			var googleHybrid = L.tileLayer('http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}', {
				maxZoom: 20,
				subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
			});
			var googleStreet = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
				maxZoom: 20,
				subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
			});
			var osmStreet = L.mapbox.tileLayer('mapbox.streets');


			map.setView([13.539,100.745],6);
			var hash = new L.Hash(map);
			L.control.locate().addTo(map);

			var featureGroup = L.featureGroup();
			var houseClusterGroup = new L.MarkerClusterGroup();
			var disabLayer = L.mapbox.featureLayer();

			L.control.layers({

				'Google Street':googleStreet,
				'Google Hybrid':googleHybrid.addTo(map),
				'Google Sat':googleSat,
				'OSM Street':osmStreet
			},{
				'หลังคาเรือน':houseClusterGroup.addTo(map),
				'ติดเตียง':disabLayer
			}).addTo(map);




			var drawControl = new L.Control.Draw({
				edit: {
					featureGroup: featureGroup
				},
				draw:{
					polyline:false,
					polygon:false,
					circle:false,
					rectangle:false
				}
			}).addTo(map);


			// Load data
			disabLayer.loadURL('/adl')
			.setFilter(function(feature){
				return (feature.geometry.coordinates[1]!= null) && (feature.geometry.coordinates[0]!= null);
			})
			.on('ready',function(){

			});


			var labelLayer = L.featureGroup().addTo(map);
			var houseLayer = L.mapbox.featureLayer();
			houseLayer.loadURL('/house')
          //houseLayer.loadURL('./house.json')
          .setFilter(function(feature){
          	return (feature.geometry.coordinates[1]!= null) && (feature.geometry.coordinates[0]!= null)
          })
          .on('ready',function(){


            //map.fitBounds(houseLayer.getBounds());

            
            houseLayer.eachLayer(function(layer){
            	var latLng =  [layer.feature.geometry.coordinates[1],layer.feature.geometry.coordinates[0]];
            	var marker = L.marker(latLng,{
            		icon: L.mapbox.marker.icon({'marker-symbol': 'warehouse', 'marker-color': '#0000FF'}),
            		title:layer.feature.properties.title
            	});
            	marker.bindPopup(layer.feature.properties.title);
            	marker.addTo(houseClusterGroup);
            	var lbHtml = '<span style="background-color:#FFF8DC;">';
            	lbHtml+=layer.feature.properties.hno+' หมู่ ';
            	lbHtml+=layer.feature.properties.villno;
            	lbHtml+='<span>';
            	L.marker(latLng,{icon:L.divIcon({className:'point-label', html:lbHtml})}).addTo(labelLayer);

            });//end loop

            var popupcontent = '<input type="text" class="txt"/><div class="show" style="overflow: scroll;min-width: 220px;"></div>';
            popupcontent+= '<div class="btn-add" style="display:none"><button>บันทึก</button></div>';

            map.on('draw:created', function(e) {

            	var url = $(location).attr('href'); 

            	if(e.layerType === 'marker'){
            		featureGroup.addLayer(e.layer);
            		var drawFeatures = featureGroup.toGeoJSON();
            		var point = drawFeatures.features[drawFeatures.features.length-1];
            		var latLng = [point.geometry.coordinates[1],point.geometry.coordinates[0]];
            		var newMarker=L.marker(latLng,{
                        //draggable: true
                    }).addTo(map);
            		var popup = newMarker.bindPopup(popupcontent,{maxWidth:'auto'});
            		newMarker.openPopup();


            		$('.txt').on('keypress',function(e){
            			if(e.keyCode!==13) return;
            			$('.show').html('');
            			var s = $(this).val();
            			houseLayer.getGeoJSON().features.forEach(function(found){
            				if(found.properties.hno == s){
            					var hcode = found.properties.hcode;

            					$('.show').append('<a style="cursor:pointer"  class ="hc" data-hcode='+hcode+'>'+found.properties.title+'<a><br>');

            				}
                        })//loop

            			$('.hc').click(function(){
            				var hcode = $(this).data("hcode");
            				$('.txt').val($(this).text());
            				$('.show').html('')
            				$('.btn-add').toggle()
            				$('.btn-add').click(function(){

            					var title = $('.txt').val();
            					var json = {
            						'hcode':hcode,
            						'ygis':newMarker.getLatLng().lat,
            						'xgis':newMarker.getLatLng().lng
            					}
            					var jsonFeature =turf.point([json.xgis,json.ygis],{'title':'test test'});

            					$.ajax({
            						type: 'POST',
            						url: '/add',
            						data: JSON.stringify(json),
            						contentType: "application/json; charset=utf-8",
            						dataType: "json"
            					}).done(function(data){ 

            						console.log(data);       
                        //window.location.href= url;
                        if(data.save==='ok'){
                          //location.reload();



                          L.marker([json.ygis,json.xgis],{
                          	icon: L.mapbox.marker.icon({'marker-symbol': 'warehouse', 'marker-color': '#0000FF'}),
                          	title:title                      
                          }).bindPopup(title).addTo(houseClusterGroup);
                          newMarker.remove();
                          
                      }else{
                      	alert('error')
                      }
                  });


                                //location.reload();
                            });

                        });//click



                    });//keypress


            		newMarker.on('dragend',function(e){
            			console.log(e.target.getLatLng());
            		});
            		$('.txt').click(function(){
            			$(this).select();
                    });//click
            		popup.on('popupclose',function(){
            			newMarker.remove();
            		})




            }// end if

        });// end draw


            $('.btn-circle').click(function(){
            	var r=prompt("กรุณาระบุรัศมี (เมตร)", 100);

            	var circleRadius=L.circle(map.getCenter(),Number(r)).addTo(map);
            	circleRadius.setStyle({'color':'red','dashArray':4,weight: 2,fillColor:'red'});
            	circleRadius.on('click',function(e){
            		var layer = e.target;
		//console.log(layer);
		var latlng = layer.getLatLng();
		var circleJson = turf.circle([latlng.lng,latlng.lat],Number(r)/1000 ,100, 'kilometers', {});
		
		var circleCollection = turf.featureCollection([circleJson]);

		//var resGeojson = turf.within(,circleCollection);

		var houseGeojson =[];
		houseLayer.eachLayer(function(layer){
			if (layer.feature.geometry.coordinates[1]!= null & layer.feature.geometry.coordinates[0]!= null){
				houseGeojson.push(layer.feature);
			}
		});
		var houseCollection = turf.featureCollection(houseGeojson);

		var resGeojson = turf.within(houseCollection,circleCollection);
		var countHouse = resGeojson.features.length;
		var list ="";
		resGeojson.features.forEach(function(data){
			list+= "<br> เลขที่ "+data.properties.title;
		});
		alertify.alert("<b>พื้นที่นี้มี  <u>"+countHouse+"</u> หลังคาเรือน</b>" +list)
		
		
	})
});//end click radius


        });// end Ready



map.on('overlayadd', function(layer){
	console.log('add -'+layer.name)
	if(layer.name==='หลังคาเรือน'){
		labelLayer.addTo(map);
		//houseLayer.addTo(map);
	}
});

map.on('overlayremove', function(layer){
	console.log('remove -'+ layer.name)
	if(layer.name==='หลังคาเรือน'){
		labelLayer.remove();
		//houseLayer.remove();
	}
});

// search control

var searchControl = new L.Control.Search({layer: houseClusterGroup });
map.addControl(searchControl);
searchControl.on('search:locationfound',function(data){
	console.log(data)
	var latLngs = [ data.latlng ];  	
	var pointFoundBounds = L.latLngBounds(latLngs);
	map.fitBounds(pointFoundBounds);
	data.layer.openPopup();
});



L.control.custom({
	position: 'topleft',
	content : '<button type="button" class="btn btn-default btn-circle">'+
	'    <i class="fa fa-circle-o"></i>'+
	'</button>',
	classes : 'btn-group-vertical btn-group-sm',
	style   :
	{
		margin: '10px',
		padding: '0px 0 0 0',
		cursor: 'pointer'
	},

}).addTo(map);

L.control.custom({
	position: 'topleft',
	content : '<button type="button" class="btn btn-default btn-reload">'+
	'    <i class="fa fa-refresh"></i>'+
	'</button>',
	classes : 'btn-group-vertical btn-group-sm',
	style   :
	{
		margin: '10px',
		padding: '0px 0 0 0',
		cursor: 'pointer'
	},

}).addTo(map);

$('.btn-reload').click(function(){
	location.reload();
});




var crosshairIcon = L.icon({
	iconUrl: 'images/crosshair.png',
    iconSize:     [25, 25], // size of the icon
    //iconAnchor:   [10, 10], // point of the icon which will correspond to marker's location
});
crosshair = new L.marker(map.getCenter(), {icon: crosshairIcon, clickable:false});
crosshair.addTo(map);

// Move the crosshair to the center of the map when the user pans
map.on('move', function(e) {
	crosshair.setLatLng(map.getCenter());

});

map.on('moveend', function(e) {    
	var latlng = crosshair.getLatLng();
    //console.log(latlng)
});


}); // end program

</script>
</body>
</html>